package com.example.aop_part3_chaptor01

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.app.PendingIntent.FLAG_UPDATE_CURRENT
import android.content.Context
import android.content.Intent
import android.os.Build
import android.widget.RemoteViews
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import com.google.firebase.messaging.FirebaseMessagingService
import com.google.firebase.messaging.RemoteMessage

open class MyFirebaseMessagingService : FirebaseMessagingService() {
    override fun onNewToken(p0: String) {
        super.onNewToken(p0)
    }

    override fun onMessageReceived(remoteMessage: RemoteMessage) {
        super.onMessageReceived(remoteMessage)

        createNotificationChannel()

        val type = remoteMessage.data["type"]?.let {
            NotificationType.valueOf(it)
        }
        val title = remoteMessage.data["title"]
        val message = remoteMessage.data["message"]

        type ?: return


        NotificationManagerCompat.from(this).notify(type.id, createNotification(type, title, message))
    }

    private fun createNotificationChannel() { // channel ÏÉùÏÑ±ÌïòÎäî Í≥ºÏ†ï !!~!
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                CHANNEL_NAME,
                NotificationManager.IMPORTANCE_DEFAULT
            )
            channel.description = CHANNEL_DESCRIPTION

            (getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager)
                .createNotificationChannel(channel)
        }
    }

    private fun createNotification(
        type: NotificationType,
        title: String?,
        message: String?
    ): Notification {
        val intent = Intent(this,MainActivity::class.java).apply{
            putExtra("NotificationType", "${type.title} ÌÉÄÏûÖ")
            addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)
            // Stack Íµ¨Ï°∞ÏóêÏÑú TOPÏóêÎäî Single ÌïúÍ∞úÎßå ÏûàÎäî Í≤É ÌôîÎ©¥Ïù¥ ÌïúÍ∞ú Î∞ñÏóê ÏóÜÏùå
            // BÏóêÏÑú BÌôîÎ©¥ ÏúºÎ°ú Ïù¥ÎèôÌïòÎäî Í≤ΩÏö∞ Í∏∞Ï°¥ÌôîÎ©¥ÏùÑ Í∞±Ïã†ÌïòÎ©¥ Î©îÎ™®Î¶¨ ÏÜåÎ™®Í∞Ä ÌïÑÏöîÌïòÍ≥† Í∞ôÏùÄ ActivityÍ∞Ä StackÏóê ÏåìÏù¥ÎØÄÎ°ú SINGLE_TOPÏúºÎ°ú ÌîåÎûòÍ∑∏ ÏÉùÏÑ± !
        }

        val pendingIntent = PendingIntent.getActivity(this,type.id,intent,FLAG_UPDATE_CURRENT)
        // pendingIntentÎûÄ ? ÎàÑÍµ∞Í∞ÄÌïúÌÖå Ïù∏ÌÖêÌä∏Î•º Îã§Î£∞ Ïàò ÏûàÎäî Í∂åÌïúÏùÑ Ï§ÄÎã§Í≥† ÏÉùÍ∞Å!

        val notificationBuilder = NotificationCompat.Builder(this, CHANNEL_ID)
            .setSmallIcon(R.drawable.ic_notification)
            .setContentTitle(title)
            .setContentText(message)
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
            .setContentIntent(pendingIntent)
            .setAutoCancel(true) // ÌÅ¥Î¶≠ÌñàÏùÑÎïå ÏûêÎèôÏúºÎ°ú NotificationÏù¥ Îã´ÌûåÎã§.

        when (type) {
            NotificationType.NORMAL -> Unit
            NotificationType.EXPENDABLE -> {
                notificationBuilder.setStyle(
                    NotificationCompat.BigTextStyle()
                        .bigText(
                            "üòÅüòíüòä‚ò∫Ô∏èüòòüò≠üò≠‚ò∫Ô∏èüò≥" +
                                    "üòîüòâüòâüòåüòâüòåüôàüôàüëÄ" +
                                    "üôàüëÄüòúüòëüòúüòëüòúüòúüòãüòÑüòÑ" +
                                    "üòîüòâüòâüòåüòâüòåüôàüôàüëÄ" +
                                    "üôàüëÄüòúüòëüòúüòëüòúüòúüòãüòÑüòÑ" +
                                    "üôàüëÄüòúüòëüòúüòëüòúüòúüòãüòÑüòÑ"
                        )
                )
            }
            NotificationType.CUSTOM -> {
                notificationBuilder.setStyle(NotificationCompat.DecoratedCustomViewStyle())
                    .setCustomContentView(
                        RemoteViews(
                            packageName,
                            R.layout.view_custom_notification
                        ).apply {
                            setTextViewText(R.id.title,title)
                            setTextViewText(R.id.message, message)
                        }
                    )
            }
        }

        return notificationBuilder.build()
    }

    companion object {
        private const val CHANNEL_NAME = "Emogi Party"
        private const val CHANNEL_DESCRIPTION = "Emogi PartyÎ•º ÏúÑÌïú Ï±ÑÎÑê"
        private const val CHANNEL_ID = "Channel Id"
    }
}